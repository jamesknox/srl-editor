/* 
 * Copyright (c) 2008, National Institute of Informatics
 *
 * This file is part of SRL, and is free
 * software, licenced under the GNU Library General Public License,
 * Version 2, June 1991.
 *
 * A copy of this licence is included in the distribution in the file
 * licence.html, and is also available at http://www.fsf.org/licensing/licenses/info/GPLv2.html.
*/
package srl.corpus.pre;

import java.io.IOException;
import java.io.Reader;
import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.Tokenizer;

/**
 *
 * @author john
 */
public class PreTokenizer extends Tokenizer {

    final private Reader input;

    public static char SEPERATOR = ' ';
    public static char SPLITTER = '\u00b6';
    private int offset = 0;
    
    public PreTokenizer(Reader input) {
        this.input = input;
    }

    public Reader getInput() {
        return input;
    }

    boolean split = false;
    
    @Override
    public Token next() throws IOException {
        if(split) {
            char[] buf = new char[1];
            buf[0] = SPLITTER;
            split = false;
            return new Token(buf,0,1,offset-1, offset);
        }
        int c;
        char[] buf = new char[256];
        int oldOffset = offset;
        int i = 0;
        while((c = input.read()) != SEPERATOR && c != SPLITTER && c != -1) {
            if(c == '<')
                return startTagDetection();
            buf[i++] = (char)c;
            if(i == 256) {
                System.err.println("Token exceeds maximum length!");
                break;
            }
            offset++;
        }
        offset++;
        
        if(c == SPLITTER)
            split = true;
        if(c == -1 && i == 0)
            return null;
        return new Token(buf,0,i,oldOffset, offset);
    }
    
    public Token startTagDetection() {
        char c;
        StringBuffer tagName = new StringBuffer(), tagClass = new StringBuffer();
        while(Character.isLetter(c = (char)input.read())) {
            tagName.append(c);
        }
        if()
    }

    @Override
    public void close() throws IOException {
        input.close();
    }

    @Override
    public void reset() throws IOException {
        //input.reset();
        offset = 0;
        split = false;
    }

}
